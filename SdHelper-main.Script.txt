#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_PageUID "SdHelper"


// logging function, should be "MLHook_LogMe_" + PageUID
Void MLHookLog(Text msg) {
    SendCustomEvent("MLHook_LogMe_" ^ C_PageUID, [msg]);
}


declare Vec2[] TarmacFsArr;


declare CSmPlayer ThePlayer;

Void GetPlayer() {
    foreach (Player in Players) {
        if (Player.User.Name == LocalUser.Name) {
            ThePlayer <=> Player;
            // MLHookLog("Found Player: " ^ Player.User.Name);
            break;
        }
    }
}

declare CMlLabel MainLabel;
declare CMlLabel IndicatorLabel;
declare CMlQuad QBar;
declare CMlQuad QMid;
declare CMlQuad QQuality;

Void EnsureMainLabel() {
    if (MainLabel == Null) {
        MainLabel <=> Page.GetFirstChild("sdhelper-label") as CMlLabel;
    }
    if (IndicatorLabel == Null) {
        IndicatorLabel <=> Page.GetFirstChild("sd-pct-rating") as CMlLabel;
    }
    if (QBar == Null) {
        QBar <=> Page.GetFirstChild("sd-slider-bar") as CMlQuad;
    }
    if (QMid == Null) {
        QMid <=> Page.GetFirstChild("sd-slider-mid") as CMlQuad;
    }
    if (QQuality == Null) {
        QQuality <=> Page.GetFirstChild("sd-slider-quality") as CMlQuad;
    }
}

Void SetPos(CMlQuad quad, Vec2 pos) {
    quad.RelativePosition.X = pos.X;
    quad.RelativePosition.Y = pos.Y;
}


Real InvLerp(Real a, Real b, Real v) {
    return (v - a) / (b - a);
}

Real Lerp(Real a, Real b, Real t) {
    return (b - a) * t + a;
}

Vec3 GetColor(Real idx) {
    if (idx <= 0.) return <0., 1., 0.>;
    if (idx == 1.) return <0.4, 0.4, 1.>;
    if (idx == 2.) return <1., 0.4, 0.4>;
    return <1., 1., 1.>;
}


Vec3 GetSlideMsgColor(Real SideSpeed) {
    declare Vec2 lower = <0., -1.>;
    declare Vec2 upper = <0., -1.>;
    declare Vec2 cur = <0., 0.>;
    foreach (IdealSS in TarmacFsArr) {
        cur = IdealSS;
        if (SideSpeed >= cur.X) {
            lower = cur;
            continue;
        }
        if (SideSpeed < cur.X && upper.Y == -1.) {
            upper = cur;
            continue;
        }
    }
    if (lower.Y == -1. || upper.Y == -1.) {
        return GetColor(3.);
    }
    declare Real pos = InvLerp(lower.X, upper.X, SideSpeed);
    return GetColor(lower.Y) * (1. - pos) + GetColor(upper.Y) * pos;
}


Real GetPct(Real idx) {
    if (idx <= 0.) return 1.;
    if (idx == 1.) return .9;
    if (idx == 2.) return .5;
    return 0.;
}


Real GetSpeedSlideScorePct(Real SideSpeed) {
    declare Vec2 lower = <0., -1.>;
    declare Vec2 upper = <0., -1.>;
    declare Vec2 cur = <0., 0.>;
    foreach (IdealSS in TarmacFsArr) {
        cur = IdealSS;
        if (SideSpeed >= cur.X) {
            lower = cur;
            continue;
        }
        if (SideSpeed < cur.X && upper.Y == -1.) {
            upper = cur;
            continue;
        }
    }
    if (lower.Y == -1. || upper.Y == -1.) {
        return GetPct(3.);
    }
    declare Real pos = InvLerp(lower.X, upper.X, SideSpeed);
    return GetPct(lower.Y) * (1. - pos) + GetPct(upper.Y) * pos;
}

Real GetExtraMaxSideSpeedForSlide(Real Speed) {
    return Lerp(0., 27.5 - 12.5, InvLerp(111., 278., Speed));
}

Real GetMaxSideSpeedForSlide(Real Speed) {
    return 12.5 + GetExtraMaxSideSpeedForSlide(Speed);
}

// ideal sidespeed: 5.5
// clamp 0 to 12.5
// so x position of marker is at (5.5/12.5 = 0.44) * length
// LRSide: -1. or 1.
Void SetSlider(Boolean Visible, Real LeftRightSide, Real SideSpeed, Vec3 Color, Real sped) {
    if (Visible) {
        QBar.Show();
        QMid.Show();
        QQuality.Show();
        IndicatorLabel.Show();

        declare Vec2 Pos = <-35., -45.>;
        Pos.X = Pos.X * LeftRightSide;

        declare Width = 42.32;
        declare QualityPos = Pos;
        declare MidPos = Pos;
        declare MaxSideSpeed = GetMaxSideSpeedForSlide(sped);

        MidPos.X = MidPos.X - ((5.5 / MaxSideSpeed - .5) * Width * LeftRightSide);
        QualityPos.X = QualityPos.X - ((ML::Abs(SideSpeed) / MaxSideSpeed - .5) * Width * LeftRightSide);

        SetPos(QBar, Pos);
        SetPos(QMid, MidPos);
        SetPos(QQuality, QualityPos);

        QQuality.Colorize = Color;

        IndicatorLabel.RelativePosition.X = Pos.X;
        IndicatorLabel.RelativePosition.Y = Pos.Y - 7.5;
    } else {
        QBar.Hide();
        QMid.Hide();
        QQuality.Hide();
        IndicatorLabel.Hide();
    }
}


Void UpdateTarmacIdealSpeeds(Real sped) {
    if (sped < 111.) return;
    // 3, 4, 5
    declare MaxSideSpeed = GetMaxSideSpeedForSlide(sped);
    TarmacFsArr[3].X = 6.5 / 12.5 * MaxSideSpeed;
    TarmacFsArr[4].X = 8.9 / 12.5 * MaxSideSpeed;
    TarmacFsArr[5].X = MaxSideSpeed;
}


Void RunUpdateSDs() {
    GetPlayer();
    // ThePlayer.Position;
    // ThePlayer.AimYaw;
    // ThePlayer.AimPitch;
    // ThePlayer.AimRoll;
    // ThePlayer.AimDirection;
    // ThePlayer.UpDirection;
    // ThePlayer.LeftDirection;
    declare vel = ThePlayer.Velocity;
    declare sped = ThePlayer.Speed;

    declare Real SADegrees;
    declare Real SlipAngle;

    if (sped < 10.) {
        SADegrees = 0.;
    } else {
        declare PI = ML::PI();
        SlipAngle = ML::Atan2(vel.X, vel.Z) - ThePlayer.AimYaw;
        SlipAngle = ML::Mod(SlipAngle + PI, 0., 2. * PI) - PI;
        SADegrees = ML::RadToDeg(SlipAngle);
    }

    if (ML::Abs(SADegrees) < 0.35) {
        SADegrees = 0.;
        SlipAngle = 0.;
    }

    UpdateTarmacIdealSpeeds(sped);
    declare SideSpeedRaw = sped * ML::Sin(SlipAngle);
    declare SideSpeed = ML::Abs(SideSpeedRaw);
    declare SlidePct = GetSpeedSlideScorePct(SideSpeed);
    declare IndicatorColor = GetSlideMsgColor(SideSpeed);
    declare ColorTxt = "$s$" ^ TL::ColorToText(IndicatorColor);

    declare LR = 1.;
    if (SideSpeedRaw < 0.) LR = -1.;

    // need to get velocity vector and orientation vector

    EnsureMainLabel();
    declare ShouldDraw = SlidePct > 0. && sped >= 400./3.6;
    SetSlider(ShouldDraw, LR, SideSpeed, IndicatorColor, sped);
    if (SADegrees == 0) {
        MainLabel.Value = "No Slide";
    } else {
        MainLabel.Value = ColorTxt ^ SlidePct;
    }

    MainLabel.Value = MainLabel.Value ^ "\n" ^ SideSpeed;
    IndicatorLabel.Value = ColorTxt ^ TL::FormatReal(SlidePct * 10., 1, True, False);
}



Void InitValues() {
    TarmacFsArr = [
        <.0, 3.0>,
        <4.5, 2.0>,
        <5.5, 0.0>,
        <6.5, 1.0>,
        <8.9, 2.0>,
        <12.5, 3.0>
    ];
}



main() {
    yield;
    yield;
    yield;
    yield;
    yield;
    InitValues();
    GetPlayer();
    while (True) {
        yield;
        RunUpdateSDs();
    }
}
